/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package clientShashki;
import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
/**
 *
 * @author Александра
 */
public class GameBoard extends javax.swing.JFrame implements ServerEventListener {
    private final int BOARD_SIZE = 8;
    private JButton[][] boardButtons = new JButton[BOARD_SIZE][BOARD_SIZE];
    private Piece[][] pieces = new Piece[BOARD_SIZE][BOARD_SIZE];
    private int selectedRow = -1, selectedCol = -1;
    private boolean isTurn = false;
    private final Client client;
    private final Player player;
    ImageIcon blackPiece = new ImageIcon(new ImageIcon(getClass().getResource("/black.png")).getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
    ImageIcon whitePiece = new ImageIcon(new ImageIcon(getClass().getResource("/white.png")).getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
    ImageIcon blackKing = new ImageIcon(new ImageIcon(getClass().getResource("/blackKing.png")).getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
    ImageIcon whiteKing = new ImageIcon(new ImageIcon(getClass().getResource("/whiteKing.png")).getImage().getScaledInstance(60, 60, Image.SCALE_SMOOTH));
    /**
     * Creates new form Game
     * @param client
     * @param player
     */
    public GameBoard(Client client, Player player) {
        this.client = client;
        this.player = player;
        initializeListener();
        initComponents();
        InitializeBoard();
        InitializePieces();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Board = new javax.swing.JPanel();
        jLabelP1 = new javax.swing.JLabel();
        jLabelTurn = new javax.swing.JLabel();
        jLabelP2 = new javax.swing.JLabel();
        exitButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        Board.setBackground(new java.awt.Color(255, 255, 255));
        Board.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        Board.setPreferredSize(new java.awt.Dimension(560, 560));
        Board.setLayout(new java.awt.GridLayout(8, 8));
        getContentPane().add(Board, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 40, -1, -1));

        jLabelP1.setText("Игрок1");
        getContentPane().add(jLabelP1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 130, -1, -1));

        jLabelTurn.setText("Ожидание второго игрока");
        getContentPane().add(jLabelTurn, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, -1, -1));

        jLabelP2.setText("Игрок2");
        getContentPane().add(jLabelP2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 370, -1, -1));

        exitButton1.setText("Выход");
        exitButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(exitButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(810, 30, -1, -1));

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/back2.jpg"))); // NOI18N
        jLabel1.setText("jLabel1");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, 930, 670));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButton1ActionPerformed
        // TODO add your handling code here:
        try{
            client.sendExitGame(player.getNickName());
            this.dispose(); // Закрыть игровое окно
            new GameMenu(client, player).setVisible(true);
        } catch (IOException e) {
            System.err.println("Client error: " + e.getMessage());
        }
    }//GEN-LAST:event_exitButton1ActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        try{
            client.sendExit();
        } catch (IOException e) {
            System.err.println("Client error: " + e.getMessage());
        }
    }//GEN-LAST:event_formWindowClosing
    
    private void initializeListener(){
        client.setListener(this);
    }
    
    private void InitializeBoard(){
        Board.setLayout(new GridLayout(8, 8));
        for (int row = 0; row < BOARD_SIZE; row++) {
            for (int col = 0; col < BOARD_SIZE; col++) {
                JButton cell = new JButton();
                boolean isWhite = (row + col) % 2 == 0;
                cell.setBackground(isWhite ? Color.WHITE : new Color(121,85,61));
                cell.setOpaque(true);
                cell.setBorderPainted(false);
                cell.addActionListener(new CellClickListener(client, row, col));
                boardButtons[row][col] = cell;
                Board.add(cell);
            }
        }
    }

    private void InitializePieces(){
        for(int row=0; row<3; row++){
            for(int col=0; col<BOARD_SIZE; col++){
                if((row+col)%2==1) placePiece(row, col, false);
            }
        }
        for(int row=5; row<BOARD_SIZE; row++){
            for(int col=0; col<BOARD_SIZE; col++){
                if((row+col)%2==1) placePiece(row, col, true);
            }
        }
    }

    private void placePiece(int row, int col, boolean isWhite) {
        pieces[row][col] = new Piece(isWhite);
        boardButtons[row][col].setIcon(isWhite ? whitePiece : blackPiece);
    }
    
    private void resetSelection() {
        if (selectedRow != -1 && selectedCol != -1) {
            boardButtons[selectedRow][selectedCol].setBorder(null);
        }
        selectedRow = -1;
        selectedCol = -1;
    }
    // Измененный CellClickListener
    private class CellClickListener implements ActionListener {
        private final int row, col;
        private final Client client;
    
        public CellClickListener(Client client, int row, int col) {
            this.row = row;
            this.col = col;
            this.client = client;
        }

        @Override
        public void actionPerformed(ActionEvent e) {
            if (!isTurn) return; // Игрок не может ходить, если не его очередь

            Piece clickedPiece = pieces[row][col];

            if (clickedPiece != null && clickedPiece.isPWhite() == player.getColor()) {
                // Клик по своей шашке — выбираем новую или переопределяем текущую
                if (selectedRow != row || selectedCol != col) {
                    resetSelection(); // убираем подсветку с предыдущей шашки
                    selectedRow = row;
                    selectedCol = col;
                    boardButtons[row][col].setBorder(BorderFactory.createLineBorder(Color.GREEN, 3));
                    System.out.println("New piece selected: " + row + "," + col);
                }
            } else if (selectedRow != -1) {
                // Попытка хода на пустую клетку
                System.out.println("try to move: " + selectedRow + "," + selectedCol + " -> " + row + "," + col);
                client.sendMove(selectedRow, selectedCol, row, col);
                System.out.println("Send move to server");
            }
        }
    }
    // Улучшенный onContinueCapture
    @Override
    public void onContinueCapture(String message){
        try {
            String[] parts = message.split(" ");
            if (parts.length < 2) {
                throw new IllegalArgumentException("Incorrect format");
            }

            int row = Integer.parseInt(parts[0]);
            int col = Integer.parseInt(parts[1]);

            isTurn = true; // Сохраняем ход за текущим игроком
            selectedRow = row; // Запоминаем шашку, которой нужно продолжать
            selectedCol = col;

            System.out.println("Continue capture: " + row + "," + col);
            JOptionPane.showMessageDialog(this, "Вы должны продолжить взятие этой шашкой!");

            // Можно добавить подсветку обязательной шашки
            boardButtons[row][col].setBorder(BorderFactory.createLineBorder(Color.YELLOW, 3));
        } catch (Exception e) {
            System.err.println("Error continue capture: " + e.getMessage());
            isTurn = false;
            resetSelection();
        }
    }
    
    @Override
    public void onMoveReceived(String move) {
        try {
            System.out.println("Move: " + move);
            String[] parts = move.split(" ");
            if (parts.length < 4) {
                throw new IllegalArgumentException("Incorrect format");
            }

            int fromRow = Integer.parseInt(parts[0]);
            int fromCol = Integer.parseInt(parts[1]);
            int toRow = Integer.parseInt(parts[2]);
            int toCol = Integer.parseInt(parts[3]);

            Piece movingPiece = pieces[fromRow][fromCol];
            if (movingPiece == null) return;

            // Просто перемещаем фигуру
            pieces[toRow][toCol] = movingPiece;
            pieces[fromRow][fromCol] = null;

            // Обновляем иконки
            boardButtons[toRow][toCol].setIcon(boardButtons[fromRow][fromCol].getIcon());
            boardButtons[fromRow][fromCol].setIcon(null);

            // Проверка на превращение в дамку
            if (((movingPiece.isPWhite() && toRow == 0) || (!movingPiece.isPWhite() && toRow == 7)) && !movingPiece.isPKing()) {
                movingPiece.makeKing();
                boardButtons[toRow][toCol].setIcon(movingPiece.isPWhite() ? whiteKing : blackKing);
            }

            resetSelection();
        } catch (Exception e) {
            System.err.println("Move error: " + e.getMessage());
        }
    }
    
    @Override
    public void onCaptureReceived(String message) {
        try {
            System.out.println("Capture: " + message);
            String[] coords = message.split(" ");

            int row = Integer.parseInt(coords[0]);
            int col = Integer.parseInt(coords[1]);

            pieces[row][col] = null;
            boardButtons[row][col].setIcon(null);
        } catch (Exception e) {
            System.err.println("Capture error: " + e.getMessage());
        }
    }
    @Override
    public void onErrorReceived(String error){
        JOptionPane.showMessageDialog(this, error);
    }
    @Override
    public void onGameOver(String result){
        JOptionPane.showMessageDialog(this, "Игра окончена! " + result);
        this.dispose(); // Закрыть игровое окно
        new GameMenu(client, player).setVisible(true);
    }
    @Override
    public void onYourTurn(String turn){
        isTurn = turn.equals("1");
        System.out.println("Your turn: " + isTurn);
        jLabelTurn.setText(isTurn ? "Твой ход":"Ход противника");
        
    }
    @Override
    public void onStartGame(boolean turn, String name){
        isTurn = turn;
        player.setColor(turn);
        jLabelTurn.setText(turn ? "Твой ход":"Ход противника");
        jLabelP2.setText(player.getNickName());
        jLabelP1.setText(name);
    }
    @Override
    public void onLoginSuccess(){}
    @Override
    public void onLogupSuccess(){}
    @Override
    public void onJoinSuccess(){}
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Board;
    private javax.swing.JButton exitButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelP1;
    private javax.swing.JLabel jLabelP2;
    private javax.swing.JLabel jLabelTurn;
    // End of variables declaration//GEN-END:variables
}
